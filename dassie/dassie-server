#!/bin/bash
# =============================================================================
# @file    dassie-server
# @brief   Start/stop/control the Dassie database server
# @author  Michael Hucka <mhucka@caltech.edu>
# @license Please see the file named LICENSE in the project directory
# @website https://github.com/casics/dassie
#
# This script makes use of fragments of code found on Stack Overflow.
# Code contributed to Stack Overflow is licensed CC-BY-SA 3.0.
# https://creativecommons.org/licenses/by-sa/3.0/
# =============================================================================

version_number="1.0.0"
website="https://github.com/casics/dassie"

# Configuration variables.
# .............................................................................

dump_file="data/lcsh-dump.tgz"
dbname="lcsh-db"
log_file="dassie.log"
conf_file="dassie.conf"
port=27017
username=
password=

# Body of script.  No more configuration should be necessary after this point.
# .............................................................................

# Default variable values.

program=${0##*/}
program_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
args_given="$*"
chatty=true
dry_run=false
foreground=false
use_log_file=true
pid_file=
dbpath=
exit_code=0
start_time=$(/bin/date '+%G-%m-%d:%H%M')
action=

# Helper functions.

print_usage() {
    set_paths
cat <<EOF >&2
Usage:
    $program [options] {start|stop|restart|status}

This controls the database process for Dassie.

If this is the first time that Dassie has been invoked and this instance of
the database has never been loaded, $program will automatically
unpack and restore the database archive before starting the server.
(Subsequent invocations of $program will not need to do this,
and startup will be faster.)  The first time will also require you to supply
a database user login and password to be used for authenticating network
connections to the database.

Normally, the database server process is started in the background.  This
script makes the database write diagnostic messages to the log file located at
"$log_file"
unless the option "-l" is used to change it.  When debugging problems, it may
be helpful to run the database server in the foreground by using the "-f"
option; note that doing so will mean that output will NOT be written to the
log file.

Information about the Dassie server will be saved to the configuration file
"$conf_file".
The path to the config file can be changed using the "-c" option.

Options:
    -c, --config        Use the given file as the Dassie configuration file
    -f, --foreground    Run database process in the foreground
    -h, --help          Print this help message and exit
    -l, --logfile       Write logs to the given file instead of the default
    -n, --dry-run       Show what would be done, but don't do it
    -q, --quiet         Don't display informative messages
    -v, --version       Display the current version number and exit

EOF
    print_version
}

print_version() {
    printf '%s\n' "$program version $version_number" 1>&2
    printf '%s\n' "Author:  Mike Hucka <mhucka@caltech.edu>" 1>&2
    printf '%s\n' "Website: $website" 1>&2
}

parse_args() {
    # Parse comand-line options.

    while (( $# > 0 )); do
        case $1 in
            -c | --conf )
                shift
                conf_file=$1
                ;;
            -f | --foreground )
                foreground=true
                use_log_file=false
                ;;
            -h | --help )
                print_usage
                quit 0
                ;;
            -l | --logfile )
                shift
                log_file=$1
                use_log_file=true
                ;;
            -n | --dry-run )
                dry_run=true
                ;;
            -q | --quiet )
                chatty=false
                ;;
            -v | --version )
                print_version
                quit 0
                ;;
            start|stop|restart|status)
                action=$1
                ;;
            *)
                print_usage
                quit 0
                ;;
        esac
        shift
    done
}

prepare_for_action() {
    # Check that actions make sense.  For example, check if the mongod
    # process is alread running.

    if [[ ! $action ]]; then
        say warning "No action specified."
        say warning ""
        print_usage
        quit 0
    fi

    if [[ $action == start ]]; then
        quit_if_running
    fi

    if [[ $action =~ ^(start|stop|restart)$ ]]; then
        remove_stale_pid_file
        check_log_file
        read_conf_file
        welcome
    fi
}

dispatch_action() {
    # Do the action requested by the user: start, stop, etc.

    case $action in
        start)
            start_mongod
            ;;
        stop)
            stop_mongod
            ;;
        restart)
            stop_mongod
            start_mongod
            ;;
        status)
            status_mongod
            ;;
    esac
}

recover_database() {
    set_ifs
    $dry_run || mkdir -p "$dbpath"
    restore_ifs

    ask_port
    ask_credentials

    say info "Extracting database dump from '$dump_file'."
    extract_database_dump

    start_mongod_process unauthenticated

    say info "Loading dump into running database instance. Note: this step"
    say info " will take time and print a lot of messages. If it succeeds,"
    say info " it will print 'finished restoring $dbpath.terms' near the end."
    say info ""
    restore_mongo_database

    say info "Saving info to '$conf_file'."
    save_conf_file

    say info ""
    say info "Configuring user credentials in database."
    config_mongod_user

    say info "Restarting database server process."
    read running pid < <(mongod_running)
    if $running; then
        stop_mongod

        # Mongod can take time to exit. Here we wait for a finite time.
        # Code based on https://unix.stackexchange.com/a/103864/141997
        timeout=10
        while ((timeout > 0)) && ps -p $pid >/dev/null 2>&1; do
            sleep 2
            ((timeout -= 1))
        done
    fi
    start_mongod_process

    say info "Cleaning up."
    cleanup_database_dump

    status_mongod
}

save_conf_file() {
    # Save info to configuration file & set its permissions.
    # Currently we only save the port number.

    if ! $dry_run; then
        set_ifs
        echo "$port" > "$conf_file"
        chmod og-rwx "$conf_file"
        restore_ifs
    fi
}

read_conf_file() {
    if [[ -f "$conf_file" ]]; then
        set_ifs
        read port < "$conf_file"
        restore_ifs
    fi
}

extract_database_dump() {
    set_ifs
    $dry_run || tar xzf "$dump_file"
    restore_ifs
}

cleanup_database_dump() {
    $dry_run || /bin/rm -rf dump
}

restore_mongo_database() {
    $dry_run || mongorestore -v --db $dbname dump/lcsh
}

config_mongod_user() {
    if ! $dry_run; then
        # Using --quiet to mongod doesn't stop echoing commands, so
        # need to use output rediction.
        mongo admin <<EOF > /dev/null
db.createUser( { user: "$username", pwd: "$password", roles: [ { role: "read", db: "lcsh-db" } ] } );
EOF
        if (($? > 0)); then
            say error "Unable to configure user credentials."
            say error "You should stop the database and investigate."
            quit 1
        fi
    fi
}

start_mongod_process() {
    # Start the mongod process.

    local fork="--fork"
    local restore=false

    # If we're running in the foreground, we don't write to the log file.
    # Adjust variables accordingly.
    if ! $use_log_file; then
        log_args=""
    fi
    if $foreground; then
        fork=""
        log_args=""
        say info "Database process will be run in the foreground."
    else
        # Default: run in the background
        say info "Database process will be forked and run in the background."
    fi

    set_ifs
    if [[ ! -z "${1:-}" ]]; then
        # If given an argument, start without authentication
        say info "Starting unconfigured database process."
        $dry_run || mongod $fork --pidfilepath $pid_file --dbpath=$dbpath \
                           --logpath $log_file --logRotate reopen --logappend \
                           --directoryperdb --port $port
    else
        say info "Starting normal database process."
        $dry_run || mongod $fork --pidfilepath $pid_file --dbpath=$dbpath \
                           --logpath $log_file --logRotate reopen --logappend \
                           --directoryperdb --port $port --auth --bind_ip 127.0.0.1
    fi
    restore_ifs
}

start_mongod() {
    # Do the actions to start the database, including possibly restoring it.

    restore=false
    if (database_exists $dbpath); then
        say info "Using database in $dbpath."
    else
        say warning "No database found in '$dbpath'."
        say warning "Will begin by setting up database."
        restore=true
    fi

    # Recover the database if necessary.
    if $restore; then
        say info "Creating local database directory $dbpath."
        rotate_log
        recover_database
    else
        start_mongod_process
    fi

    say info "Using config file $conf_file."
    say info "Using port $port."
}

stop_mongod() {
    read running pid < <(mongod_running)
    if $running; then
        say info "Killing process $pid."
        $dry_run || kill $pid
        set_ifs
        $dry_run || rm "$pid_file"
        restore_ifs
    else
        say warning "Dassie database process does not appear to be running."
    fi
}

restart_mongod() {
    stop_mongod
    start_mongod
}

status_mongod() {
    read running pid < <(mongod_running)
    if $running; then
        say info "Dassie database process is running with PID $pid."
    else
        say warning "Dassie database process does not appear to be running."
    fi
}

check_log_file() {
    set_ifs

    if $use_log_file && [[ -n $log_file ]]; then
        if [[ -e "$log_file" && ! -w "$log_file" ]]; then
            printf '%s\n' "Unable to write log file $log_file."
            use_log_file=0
            quit 1
        fi
    fi

    restore_ifs
}

remove_stale_pid_file() {
    set_ifs
    if [[ -f "$pid_file" ]]; then
        restore_ifs
        read running pid < <(mongod_running)
        if ! $running; then
            set_ifs
            say warning "Removing stale file $pid_file."
            $dry_run || rm -f "$pid_file"
        fi
    fi
    restore_ifs
}

set_paths() {
    cd "$program_dir"
    pid_file=$(pid_file_path)
    log_file=$(abspath $log_file)
    dump_file=$(abspath $dump_file)
    dbpath=$(abspath $dbname)
    # Put the configuration file in the database directory.
    conf_file=$dbpath/$conf_file
}

# Code modified from https://stackoverflow.com/a/31861475/743730
abspath() {
    # Takes an argument, a file, and returns its absolute path.

    if [[ -d "$1" ]]; then
        cd "$1"
        /bin/pwd -P
    else
        cd `dirname "$1"`
        echo `/bin/pwd -P`/`basename "$1"`
    fi
}

# The pid file should be somewhere independent of where dassie is installed,
# but finding a suitable location on different OSes is complicated.
pid_file_path() {
    # Returns the path to the pid file.

    file="dassie.pid"
    # Testing whether /var/run is writable can be tricky, because ACLs may
    # prevent writing even if the Unix file mode says it's writable.
    if [[ -w /var/run/user/$UID ]] && true >> /var/run/user/$UID/$file; then
        # CentOS, Ubuntu, probably Fedora too.
        echo "/var/run/user/$UID/$file"
    elif [[ -w /var/run ]] && true >> /var/run/$file; then
        # RHEL, macOS, maybe others, but needs to be running as user root.
        echo "/var/run/$file"
    elif [[ -w "$HOME/Library/Application Support" ]]; then
        # Getting a little desperate.  The following is okay on a Mac.
        echo "$HOME/Library/Application Support/org.casics.dassie.pid"
    else
        # Fall back to the directory where this script is found.
        echo $(abspath $file)
    fi
}

# This function modified from http://stackoverflow.com/a/17686989/743730
mongod_running() {
    # Returns 1-2 values: a Boolean and optionally the pid.

    set_ifs
    local status=false
    if [[ -f "$pid_file" ]]; then
        if [[ -n $(pgrep -F $pid_file) ]]; then
            local pid=$(< "$pid_file")
            status="true $pid"
        fi
    else
        # We don't have a pid file, but sometimes things go wrong and our
        # mongod process may be running after all.
        if [[ -n $(pgrep lcsh) ]]; then
            local pid=$(pgrep lcsh)
            say warning "No pid file found, but database seems to be running"
            status="true $pid"
        fi
    fi
    restore_ifs
    echo $status
}

quit_if_running() {
    # Check for pid file.  If present, it may indicate a dassie mongod
    # process is already running.

    read running pid < <(mongod_running)
    if $running; then
        say error "It appears a database process with pid $pid is running."
        say error "Use 'stop' or 'restart' to stop the previous process."
        say error "If that fails, remove file $pid_file."
        quit 1
    fi
}

welcome() {
    # Set the start time and print a welcome message.
    # Note: this can't be run until after the log file is set up.

    log ""
    log "===== $program started at $start_time ====="
    log "Arguments given: $args_given"
    log "Logging output to $log_file"

    if $dry_run; then
        say info "Dry run."
    fi
}

quit() {
    # Exit with the status code in $1.
    # If given arg $2, it's a string to be both printed and logged.

    if [[ ! -z "${2:-}" ]]; then
        say warning "$2"
    fi
    if [[ $action =~ ^(start|stop|restart)$ ]]; then
        local stop_time=$(/bin/date '+%G-%m-%d:%H%M')
        log "===== $program exited at $stop_time with exit code $1 ====="
    fi
    exit $1
}

say() {
    # Takes 2 arguments: a severity code, and a text string.
    # Prints a message to the terminal, unless the code is "note"
    # and $chatty is not 1.  Always logs the message.
    # Optional 3rd argument can be "-n" to prevent newline.

    local code=$1
    local msg=$2
    local nonewline=$3

    local RED=`tput setaf 1`
    local GREEN=`tput setaf 2`
    local YELLOW=`tput setaf 3`
    local RESET=`tput sgr0`

    if [[ -z "$nonewline" ]]; then
        newline="\n"
    else
        newline=
    fi

    case $code in
        info)
            if $chatty; then
                printf "${GREEN}%s${RESET}${newline}" "$2"
            fi
            ;;
        warning)
            printf "${YELLOW}%s${RESET}${newline}" "$2"
            ;;
        error)
            printf "${RED}%s${RESET}${newline}" "$2"
            ;;
    esac
}

log() {
    # Log a message to the log file.

    if $use_log_file && [[ -n $log_file ]]; then
        printf '%s\n' "$*" >> "$log_file"
    fi
}

rotate_log() {
    if $use_log_file && [[ -e "$log_file" ]]; then
        say info "Moving old log file to '$log_file.old'"
        $dry_run || /bin/mv $log_file $log_file.old
    fi
}

database_exists() {
    # Clever approach to doing wildcarded existence check is thanks to
    # https://stackoverflow.com/a/40808284/743730
    [[ "$(echo $1/lcsh.*)" != "$1/lcsh.*" && -e $1/WiredTiger ]]
}

is_integer() {
    [[ $1 =~ ^[0-9]+$ ]]
}

ask_port() {
    # Ask the user for the port number to use.
    while true; do
        say info "Please indicate the port to use (hit return for default $port): " -n
        read newport
        if [[ -z "$newport" ]]; then
            say info "Using default port number $port."
            break
        elif ! (is_integer $newport); then
            say error "Port argument value $port is not a number."
        else
            port=$newport
            break
        fi
    done
}

ask_credentials() {
    # Read user name and password.  Verify what the use types by making them
    # type it twice.  Don't allow blank passwords.  Encrypt and uri-encode
    # the password

    say info "Please provide a user name: " -n
    read username
    while true; do
        say info "Please provide a password: " -n
        read -s password
        echo
        say info "Please type the password again: " -n
        read -s password2
        echo
        if [[ -z "$password" ]]; then
            say error "Sorry, can't accept blank passwords.  Please try again."
        elif [[ "$password" != "$password2" ]]; then
            say error "Passwords did not match.  Please try again."
        else
            say warning "Please record the user name & password in a safe location."
            break
        fi
    done
}

set_ifs() {
    IFS=$'\n'
}

restore_ifs() {
    IFS=$' \t\n'
}

# Main entry point.

parse_args "$@"
set_paths
prepare_for_action
dispatch_action

quit $exit_code
